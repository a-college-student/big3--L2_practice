import numpy as np         # 匯入 NumPy 套件，處理矩陣用
import cv2                 # 匯入 OpenCV 套件

# ----------- 1. 建立一張黑色的影像 -----------
img = np.zeros((400, 500, 3), dtype='uint8')
# 建立一個 400x500 的黑色背景圖，3 是代表 RGB 三個通道
# dtype='uint8' 代表像素的值是 0~255（整數）

# ----------- 2. 畫直線 -----------
cv2.line(img, (50, 50), (150, 150), (255, 0, 0), 2, cv2.LINE_AA, 0)
# 參數說明：
# img        → 要畫的圖像
# (50, 50)   → 起點座標 pt1
# (150, 150) → 終點座標 pt2
# (255, 0, 0)→ 顏色（藍色 BGR）
# 2          → 線的粗細
# cv2.LINE_AA→ 線的類型（Anti-Aliased 抗鋸齒平滑線條）
# 0          → shift = 小數點位數（這裡沒用）
'''
shift 是用來控制「座標的小數精度」的參數。
它的原理是：把整數座標乘上shift的小數位數。
這樣可以讓你用整數的方式，表達出「小數點後幾位」的座標。
舉例:
希望座標:(25.34, 78.56)
但 OpenCV 的函式要求你只能提供整數座標（不能直接給小數），所以就可以這樣做
pt1 = (2534, 7856)
shift = 2

實際座標就是:(25.34, 78.56)
'''


# ----------- 3. 畫矩形 -----------
cv2.rectangle(img, (200, 50), (300, 150), (0, 255, 0), -1)
# (200, 50)  → 左上角
# (300, 150) → 右下角
# (0, 255, 0)→ 綠色
# -1         → 負數代表「填滿」矩形

# ----------- 4. 畫圓形 -----------
cv2.circle(img, (400, 100), 50, (0, 0, 255), -1)
# (400, 100) → 圓心座標
# 50         → 半徑
# (0, 0, 255)→ 紅色
# -1         → 負數代表填滿整個圓

# ----------- 5. 畫橢圓 -----------
cv2.ellipse(img, (100, 300), (60, 40), 135, 0, 180, (255, 255, 0), -1)
# (100, 300) → 橢圓中心
# (60, 40)   → 主軸長度 (水平、垂直)
# 135        → 旋轉角度（逆時針方向）
# 0~360      → 起始、結束角度（畫整個橢圓）
# (255,255,0)→ 黃色
# 1          → 線條粗細

# ----------- 6. 多邊形（空心）-----------
points = np.array([[200, 220], [220, 350], [280, 320], [300, 250]])
cv2.polylines(img, [points], False, (255, 0, 255), 2)
# points 是所有頂點的陣列（會依序連線）
# True 代表「封閉」最後一筆會連回第一筆，False代表不回連乘roop
# (255, 0, 255)→ 紫色

# ----------- 7. 多邊形（實心）-----------
points = np.array([[400, 220], [350, 300], [420, 350], [450, 250]])
cv2.fillPoly(img, [points], (255, 255, 255))
# fillPoly 會畫「填滿」的多邊形
# 不需要 isClosed，因為會自動填滿
# 顏色是白色 (255,255,255)
'''
語法:cv2.fillPoly(img, [points], color)
cv2.fillPoly函式可以填滿多個多邊形顏色，只需要在[]裡放入需要塗色的多邊形矩陣就好了
'''

# ----------- 8. 顯示結果 -----------
cv2.imshow("Example", img)  # 顯示圖片
cv2.waitKey(0)              # 等使用者按下任意鍵
